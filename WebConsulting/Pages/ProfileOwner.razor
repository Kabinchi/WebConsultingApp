@page "/pOwner"
@using Microsoft.EntityFrameworkCore
@using WebConsulting.Models
@inject ConsultingDBContext DbContext
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IEmailService EmailService
@using System.Linq

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Профиль главного администратора</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/charts.js"></script>
    <style>
        html,
        body {
            height: 100%;
            margin: 0;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        main {
            flex-grow: 1;
        }

        .table-container {
            overflow-x: auto;
            max-width: 100%;
        }

        table {
            width: 100%;
            min-width: 800px;
        }

        th, td {
            padding: 0.5rem;
            text-align: left;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
            min-width: 150px;
        }

            .action-buttons button {
                width: 100%;
            }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .user-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 600px;
        }

        .user-card {
            background-color: #f8fafc;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .deleted-user {
            background-color: #fee2e2;
            text-decoration: line-through;
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 2rem;
            background: white;
            border-radius: 0.5rem;
            padding: 1rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.2s;
        }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin: 0.5rem 0;
            color: #3b82f6;
        }

        .stat-label {
            color: #6b7280;
            font-size: 0.875rem;
        }

        .chart-type-selector {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .chart-type-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            border: 1px solid #e5e7eb;
            background: white;
            transition: all 0.2s;
        }

            .chart-type-btn:hover {
                background: #f3f4f6;
            }

            .chart-type-btn.active {
                background: #3b82f6;
                color: white;
                border-color: #3b82f6;
            }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e5e7eb;
            color: #1f2937;
        }

        .chart-wrapper {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .stat-card.green .stat-value {
            color: #10b981;
        }

        .stat-card.orange .stat-value {
            color: #f59e0b;
        }

        .stat-card.red .stat-value {
            color: #ef4444;
        }

        .stat-card.purple .stat-value {
            color: #8b5cf6;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">
    <nav class="bg-gray-800 text-white p-4">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-xl font-bold">Панель Главного Администратора</h1>
            <div>
                <button @onclick="HandleLogout" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                    Выйти
                </button>
            </div>
        </div>
    </nav>

    <main class="container mx-auto py-8 px-4 lg:px-16 min-h-[calc(95%-64px)]">
        <div class="flex flex-col md:flex-row mt-8">
            <div class="w-full md:w-1/4 p-4 bg-gray-200 mb-4 md:mb-0">
                <button class="w-full py-2 mb-4 rounded @GetTabClass(activeTab == 0)"
                        @onclick="() => ShowTab(0)">
                    Активные пользователи
                </button>
                <button class="w-full py-2 mb-4 rounded @GetTabClass(activeTab == 1)"
                        @onclick="() => ShowTab(1)">
                    Архив пользователей
                </button>
                <button class="w-full py-2 mb-4 rounded @GetTabClass(activeTab == 2)"
                        @onclick="() => ShowTab(2)">
                    Профиль
                </button>
                <button class="w-full py-2 rounded @GetTabClass(activeTab == 3)"
                        @onclick="() => ShowTab(3)">
                    Статистика
                </button>
            </div>

            <div class="w-full md:w-3/4 p-4 bg-white rounded-lg shadow-md">
                @if (activeTab == 0)
                {
                    <div>
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Активные пользователи</h2>

                        <div class="mb-4 flex flex-col md:flex-row gap-4">
                            <div class="flex-grow">
                                <input type="text" class="w-full p-2 border border-gray-300 rounded"
                                       placeholder="Поиск..." @bind="searchText" @bind:event="oninput" />
                            </div>
                            <div>
                                <select class="p-2 border border-gray-300 rounded" @bind="searchColumn">
                                    <option value="">Все столбцы</option>
                                    <option value="FullName">Имя</option>
                                    <option value="Email">Почта</option>
                                    <option value="Role">Роль</option>
                                </select>
                            </div>
                            <button @onclick="ApplyFilters" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Поиск
                            </button>
                            <button @onclick="ResetFilters" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                                Сбросить
                            </button>
                        </div>

                        @if (users == null || users.Count == 0)
                        {
                            <p class="text-gray-600">Нет активных пользователей.</p>
                        }
                        else
                        {
                            <div class="table-container">
                                <table class="table-auto bg-white">
                                    <thead class="bg-gray-200">
                                        <tr>
                                            <th class="px-2 py-2 text-sm">Имя</th>
                                            <th class="px-2 py-2 text-sm">Почта</th>
                                            <th class="px-2 py-2 text-sm">Роль</th>
                                            <th class="px-2 py-2 text-sm">Телефон</th>
                                            <th class="px-2 py-2 text-sm">Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in filteredUsers.Where(u => !u.IsDeleted && u.Role != "Owner"))
                                        {
                                            <tr class="border-t hover:bg-gray-50 cursor-pointer"
                                                @onclick="@(() => { if (!isChangingRole) ShowUserDetails(user); })">
                                                <td class="px-2 py-2 text-sm">@user.FullName</td>
                                                <td class="px-2 py-2 text-sm">@user.Email</td>
                                                <td class="px-2 py-2 text-sm @GetRoleClass(user.Role)">@user.Role</td>
                                                <td class="px-2 py-2 text-sm">@FormatPhoneNumber(user.PhoneNumber)</td>
                                                <td class="px-2 py-2 text-sm">
                                                    <div class="action-buttons">
                                                        <button @onclick="@(async () => await ChangeRole(user))"
                                                                class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 text-sm">
                                                            Изменить роль
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        @if (showUserModal && selectedUser != null)
                        {
                            <div class="modal-backdrop" @onclick="CloseUserModal"></div>
                            <div class="user-modal">
                                <div class="flex justify-between items-start mb-4">
                                    <h3 class="text-xl font-semibold">@selectedUser.FullName</h3>
                                    <button @onclick="CloseUserModal" class="text-gray-500 hover:text-gray-700 text-2xl">
                                        &times;
                                    </button>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                    <div>
                                        <p class="text-sm text-gray-600">Email:</p>
                                        <p class="font-medium">@selectedUser.Email</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Телефон:</p>
                                        <p class="font-medium">@FormatPhoneNumber(selectedUser.PhoneNumber)</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Роль:</p>
                                        <p class="font-medium @GetRoleClass(selectedUser.Role)">@selectedUser.Role</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Дата регистрации:</p>
                                        <p class="font-medium">@selectedUser.Applications.FirstOrDefault()?.CreatedAt.ToString("dd.MM.yyyy")</p>
                                    </div>
                                </div>

                                <div class="mb-6">
                                    <h4 class="font-medium mb-2">Заявки пользователя:</h4>
                                    @if (selectedUser.Applications.Any())
                                    {
                                        <div class="overflow-auto max-h-60 border rounded">
                                            <table class="min-w-full divide-y divide-gray-200">
                                                <thead class="bg-gray-50">
                                                    <tr>
                                                        <th class="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Компания</th>
                                                        <th class="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Услуги</th>
                                                        <th class="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Статус</th>
                                                        <th class="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider">Дата</th>
                                                    </tr>
                                                </thead>
                                                <tbody class="bg-white divide-y divide-gray-200">
                                                    @foreach (var app in selectedUser.Applications.Where(a => !a.IsDeleted))
                                                    {
                                                        <tr>
                                                            <td class="px-4 py-2 text-sm">@app.CompanyName</td>
                                                            <td class="px-4 py-2 text-sm">
                                                                @if (app.ApplicationServices.Any())
                                                                {
                                                                    <ul class="list-disc pl-4">
                                                                        @foreach (var appService in app.ApplicationServices)
                                                                        {
                                                                            <li>@appService.Service?.Name</li>
                                                                        }
                                                                    </ul>
                                                                }
                                                                else
                                                                {
                                                                    <span>Нет услуг</span>
                                                                }
                                                            </td>
                                                            <td class="px-4 py-2 text-sm @GetStatusClass(app.Status)">@app.Status</td>
                                                            <td class="px-4 py-2 text-sm">@app.CreatedAt.ToString("dd.MM.yyyy")</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-sm text-gray-500">Нет заявок</p>
                                    }
                                </div>

                                <div class="flex justify-end">
                                    <button @onclick="() => ShowBlockUserDialog(selectedUser)"
                                            class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                                        Заблокировать
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (activeTab == 1)
                {
                    <div>
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Архив пользователей</h2>

                        <div class="mb-4 flex flex-col md:flex-row gap-4">
                            <div class="flex-grow">
                                <input type="text" class="w-full p-2 border border-gray-300 rounded"
                                       placeholder="Поиск..." @bind="archiveSearchText" @bind:event="oninput" />
                            </div>
                            <div>
                                <select class="p-2 border border-gray-300 rounded" @bind="archiveSearchColumn">
                                    <option value="">Все столбцы</option>
                                    <option value="FullName">Имя</option>
                                    <option value="Email">Почта</option>
                                    <option value="DeletedBy">Кто удалил</option>
                                </select>
                            </div>
                            <button @onclick="ApplyArchiveFilters" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Поиск
                            </button>
                            <button @onclick="ResetArchiveFilters" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                                Сбросить
                            </button>
                        </div>

                        @if (archivedUsers == null || archivedUsers.Count == 0)
                        {
                            <p class="text-gray-600">Нет пользователей в архиве.</p>
                        }
                        else
                        {
                            <div class="table-container">
                                <table class="table-auto bg-white">
                                    <thead class="bg-gray-200">
                                        <tr>
                                            <th class="px-2 py-2 text-sm">Имя</th>
                                            <th class="px-2 py-2 text-sm">Почта</th>
                                            <th class="px-2 py-2 text-sm">Роль</th>
                                            <th class="px-2 py-2 text-sm">Дата удаления</th>
                                            <th class="px-2 py-2 text-sm">Кто удалил</th>
                                            <th class="px-2 py-2 text-sm">Причина</th>
                                            <th class="px-2 py-2 text-sm">Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in filteredArchivedUsers)
                                        {
                                            <tr class="border-t deleted-user">
                                                <td class="px-2 py-2 text-sm">@user.FullName</td>
                                                <td class="px-2 py-2 text-sm">@user.Email</td>
                                                <td class="px-2 py-2 text-sm @GetRoleClass(user.Role)">@user.Role</td>
                                                <td class="px-2 py-2 text-sm">@user.DeletedAt?.ToString("dd.MM.yyyy")</td>
                                                <td class="px-2 py-2">
                                                    <div class="text-sm max-w-[200px] flex flex-col">
                                                        <span>@GetNamePart(user.DeletedBy)</span>
                                                        <span class="text-gray-500">@GetRolePart(user.DeletedBy)</span>
                                                    </div>
                                                </td>
                                                <td class="px-2 py-2 text-sm">@user.DeleteReason</td>
                                                <td class="px-2 py-2 text-sm">
                                                    <button @onclick="() => RestoreUser(user)" class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 text-sm">
                                                        Восстановить
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                }
                else if (activeTab == 2)
                {
                    <div class="bg-white p-6 rounded-lg">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Профиль главного администратора</h2>

                        @if (!string.IsNullOrEmpty(saveMessage))
                        {
                            <div class="@(saveSuccess ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700") p-3 rounded mb-4">
                                @saveMessage
                            </div>
                        }

                        <div class="mb-4">
                            <label for="fullName" class="block text-sm font-medium text-gray-700">Имя</label>
                            <input type="text" id="fullName" class="mt-1 block w-full p-2 border border-gray-300 rounded"
                                   @bind="admin.FullName" @bind:event="oninput" disabled="@isFullNameDisabled" />
                            <button @onclick="ToggleFullNameEdit" class="text-blue-500 mt-2 text-sm">
                                @if (isFullNameDisabled)
                                {
                                    <span>Редактировать</span>
                                }
                                else
                                {
                                    <span>Отменить</span>
                                }
                            </button>
                        </div>

                        <div class="mb-4">
                            <label for="phone" class="block text-sm font-medium text-gray-700">Телефон</label>
                            @if (isPhoneDisabled)
                            {
                                <div class="mt-1 block w-full p-2 border border-gray-300 rounded bg-gray-100">
                                    @FormatPhoneNumber(admin.PhoneNumber)
                                </div>
                            }
                            else
                            {
                                <input type="text" id="phone" class="mt-1 block w-full p-2 border border-gray-300 rounded"
                                       value="@admin.PhoneNumber"
                                       @oninput="HandlePhoneInput" />
                            }
                            <button @onclick="TogglePhoneEdit" class="text-blue-500 mt-2 text-sm">
                                @if (isPhoneDisabled)
                                {
                                    <span>Редактировать</span>
                                }
                                else
                                {
                                    <span>Отменить</span>
                                }
                            </button>
                            @if (!string.IsNullOrEmpty(phoneError))
                            {
                                <p class="text-red-500 text-sm mt-1">@phoneError</p>
                            }
                        </div>

                        <div class="mb-4">
                            <label for="email" class="block text-sm font-medium text-gray-700">Почта</label>
                            <input type="email" id="email" class="mt-1 block w-full p-2 border border-gray-300 rounded"
                                   @bind="admin.Email" disabled />
                        </div>

                        <div class="mb-4">
                            <button @onclick="ShowChangePasswordModal"
                                    class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600">
                                Изменить пароль
                            </button>
                        </div>

                        @if (!isFullNameDisabled || !isPhoneDisabled)
                        {
                            <button @onclick="SaveChanges" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Сохранить изменения
                            </button>
                        }
                    </div>
                }
                else if (activeTab == 3)
                {
                    <div>
                        <h2 class="text-2xl font-bold text-gray-800 mb-6">Статистика системы</h2>

                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-value">@totalUsers</div>
                                <div class="stat-label">Всего пользователей</div>
                            </div>
                            <div class="stat-card green">
                                <div class="stat-value">@activeUsers</div>
                                <div class="stat-label">Активных</div>
                            </div>
                            <div class="stat-card red">
                                <div class="stat-value">@archivedUsersCount</div>
                                <div class="stat-label">В архиве</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">@totalApplications</div>
                                <div class="stat-label">Всего заявок</div>
                            </div>
                            <div class="stat-card green">
                                <div class="stat-value">@completedApplications</div>
                                <div class="stat-label">Выполнено</div>
                            </div>
                            <div class="stat-card orange">
                                <div class="stat-value">@pendingApplications</div>
                                <div class="stat-label">В ожидании</div>
                            </div>
                            <div class="stat-card purple">
                                <div class="stat-value">@servicesCount</div>
                                <div class="stat-label">Услуг в системе</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">@reviewsCount</div>
                                <div class="stat-label">Отзывов</div>
                            </div>
                        </div>

                        <div class="chart-wrapper">
                            <h3 class="section-title">Статусы заявок</h3>
                            <div class="chart-type-selector">
                                <button class="chart-type-btn @(statusChartType == "pie" ? "active" : "")"
                                        @onclick="@(() => ChangeStatusChartType("pie"))">
                                    Круговая
                                </button>
                                <button class="chart-type-btn @(statusChartType == "bar" ? "active" : "")"
                                        @onclick="@(() => ChangeStatusChartType("bar"))">
                                    Столбчатая
                                </button>
                                <button class="chart-type-btn @(statusChartType == "doughnut" ? "active" : "")"
                                        @onclick="@(() => ChangeStatusChartType("doughnut"))">
                                    Кольцевая
                                </button>
                            </div>
                            <div class="chart-container">
                                <canvas id="statusChart"></canvas>
                            </div>
                        </div>

                        <div class="chart-wrapper">
                            <h3 class="section-title">Популярность услуг (Топ-10)</h3>
                            <div class="chart-type-selector">
                                <button class="chart-type-btn @(servicesChartType == "bar" ? "active" : "")"
                                        @onclick="@(() => ChangeServicesChartType("bar"))">
                                    Столбчатая
                                </button>
                                <button class="chart-type-btn @(servicesChartType == "line" ? "active" : "")"
                                        @onclick="@(() => ChangeServicesChartType("line"))">
                                    Линейная
                                </button>
                                <button class="chart-type-btn @(servicesChartType == "polarArea" ? "active" : "")"
                                        @onclick="@(() => ChangeServicesChartType("polarArea"))">
                                    Полярная
                                </button>
                            </div>
                            <div class="chart-container">
                                <canvas id="servicesChart"></canvas>
                            </div>
                        </div>

                        <div class="chart-wrapper">
                            <h3 class="section-title">Динамика заявок за последние 6 месяцев</h3>
                            <div class="chart-container">
                                <canvas id="applicationsChart"></canvas>
                            </div>
                        </div>

                        <div class="chart-wrapper">
                            <h3 class="section-title">Распределение пользователей по ролям</h3>
                            <div class="chart-container">
                                <canvas id="usersChart"></canvas>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </main>

    @if (showBlockDialog)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3 class="text-lg font-bold mb-4">Блокировка пользователя</h3>
                <p class="mb-4">Вы собираетесь заблокировать пользователя @userToBlock?.FullName (@userToBlock?.Email)</p>
                <textarea @bind="blockReason" class="w-full p-2 border rounded mb-4"
                          placeholder="Укажите причину блокировки" rows="4"></textarea>
                <div class="flex justify-end gap-2">
                    <button @onclick="CloseBlockDialog" class="px-4 py-2 border rounded">Отмена</button>
                    <button @onclick="ConfirmBlockUser" class="bg-red-500 text-white px-4 py-2 rounded">
                        Подтвердить блокировку
                    </button>
                </div>
            </div>
        </div>
    }

    @if (showChangePasswordModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                @if (!codeSent)
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Изменение пароля</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Ваш email:</label>
                        <input type="email" @bind="changePasswordEmail" class="w-full px-4 py-2 border rounded-md" disabled />
                        @if (!string.IsNullOrEmpty(changePasswordError))
                        {
                            <p class="text-red-500 text-sm mt-1">@changePasswordError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseChangePasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="SendPasswordChangeCode" class="bg-blue-500 text-white px-4 py-2 rounded">Отправить код</button>
                    </div>
                }
                else if (!passwordChangeVerified)
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Подтверждение кода</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Введите код из письма:</label>
                        <input type="text" @bind="passwordChangeCode" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(passwordChangeCodeError))
                        {
                            <p class="text-red-500 text-sm mt-1">@passwordChangeCodeError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseChangePasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="VerifyPasswordChangeCode" class="bg-blue-500 text-white px-4 py-2 rounded">Продолжить</button>
                    </div>
                }
                else
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Новый пароль</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Новый пароль:</label>
                        <div class="relative">
                            <input type="@(showNewPassword ? "text" : "password")" @bind="newPassword" class="w-full px-4 py-2 border rounded-md" />
                            <button type="button" @onclick="ToggleNewPasswordVisibility" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600">
                                @if (showNewPassword)
                                {
                                    <span>🙈</span>
                                }
                                else
                                {
                                    <span>👁️</span>
                                }
                            </button>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Повторите пароль:</label>
                        <input type="password" @bind="confirmNewPassword" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(newPasswordError))
                        {
                            <p class="text-red-500 text-sm mt-1">@newPasswordError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseChangePasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="ConfirmPasswordChange" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    </div>
                }
            </div>
        </div>
    }
</body>

</html>

@code {
    private int activeTab = 0;
    private bool isFullNameDisabled = true;
    private bool isPhoneDisabled = true;
    private List<User> users = new();
    private List<User> filteredUsers = new();
    private List<User> archivedUsers = new();
    private List<User> filteredArchivedUsers = new();
    private User admin = new();
    private User selectedUser = null;
    private User userToBlock = null;
    private string phoneError = string.Empty;
    private bool showBlockDialog = false;
    private string blockReason = string.Empty;

    private string saveMessage = "";
    private bool saveSuccess = false;

    private bool showChangePasswordModal = false;
    private string changePasswordEmail = "";
    private string changePasswordError = "";
    private bool codeSent = false;
    private string passwordChangeCode = "";
    private string generatedPasswordChangeCode = "";
    private string passwordChangeCodeError = "";
    private bool passwordChangeVerified = false;
    private string newPassword = "";
    private string confirmNewPassword = "";
    private string newPasswordError = "";
    private bool showNewPassword = false;

    private string searchText = "";
    private string searchColumn = "";
    private string archiveSearchText = "";
    private string archiveSearchColumn = "";

    private bool showUserModal = false;
    private bool isChangingRole = false;

    private int totalUsers;
    private int activeUsers;
    private int archivedUsersCount;
    private int totalApplications;
    private int completedApplications;
    private int pendingApplications;
    private int servicesCount;
    private int reviewsCount;

    private string statusChartType = "pie";
    private string servicesChartType = "bar";

    private Dictionary<string, int> statusStats = new();
    private Dictionary<string, int> servicesStats = new();
    private Dictionary<string, int> monthlyApplications = new();
    private Dictionary<string, int> userRolesStats = new();

    private IJSObjectReference statusChartRef;
    private IJSObjectReference servicesChartRef;
    private IJSObjectReference applicationsChartRef;
    private IJSObjectReference usersChartRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUsers();
            admin = await DbContext.Users.FirstOrDefaultAsync(u => u.Role == "Owner") ?? new User();
            changePasswordEmail = admin.Email;

            await LoadStatistics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || activeTab == 3)
        {
            await RenderCharts();
        }
    }

    private string GetNamePart(string deletedBy)
    {
        if (string.IsNullOrEmpty(deletedBy)) return "";
        var lastBracket = deletedBy.LastIndexOf('(');
        return lastBracket > 0 ? deletedBy.Substring(0, lastBracket).Trim() : deletedBy;
    }

    private string GetRolePart(string deletedBy)
    {
        if (string.IsNullOrEmpty(deletedBy)) return "";
        var lastBracket = deletedBy.LastIndexOf('(');
        return lastBracket > 0 ? deletedBy.Substring(lastBracket) : "";
    }

    private async Task LoadUsers()
    {
        users = await DbContext.Users
            .Include(u => u.Applications)
                .ThenInclude(a => a.ApplicationServices)
                    .ThenInclude(appService => appService.Service)
            .ToListAsync();

        filteredUsers = users.Where(u => !u.IsDeleted).ToList();
        archivedUsers = users.Where(u => u.IsDeleted).ToList();
        filteredArchivedUsers = archivedUsers;
    }

private void ShowTab(int tabIndex)
{
    if (activeTab == 3 && tabIndex != 3)
    {
        _ = JSRuntime.InvokeVoidAsync("destroyChart", "statusChart");
        _ = JSRuntime.InvokeVoidAsync("destroyChart", "servicesChart");
        _ = JSRuntime.InvokeVoidAsync("destroyChart", "applicationsChart");
        _ = JSRuntime.InvokeVoidAsync("destroyChart", "usersChart");
    }
    
    activeTab = tabIndex;
    if (tabIndex == 0) ApplyFilters();
    else if (tabIndex == 1) ApplyArchiveFilters();
}

    private void ApplyFilters()
    {
        try
        {
            var query = users.Where(u => !u.IsDeleted && u.Role != "Owner").AsQueryable();

            if (!string.IsNullOrEmpty(searchText))
            {
                if (string.IsNullOrEmpty(searchColumn))
                {
                    query = query.Where(u =>
                        (u.FullName != null && u.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                        (u.Email != null && u.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                        (u.Role != null && u.Role.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
                }
                else
                {
                    query = searchColumn switch
                    {
                        "FullName" => query.Where(u => u.FullName != null &&
                                  u.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase)),
                        "Email" => query.Where(u => u.Email != null &&
                                  u.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)),
                        "Role" => query.Where(u => u.Role != null &&
                                  u.Role.Contains(searchText, StringComparison.OrdinalIgnoreCase)),
                        _ => query
                    };
                }
            }

            filteredUsers = query.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при фильтрации: {ex.Message}");
            filteredUsers = users.Where(u => !u.IsDeleted && u.Role != "Owner").ToList();
        }
    }

    private void ApplyArchiveFilters()
    {
        try
        {
            var query = archivedUsers.AsQueryable();

            if (!string.IsNullOrEmpty(archiveSearchText))
            {
                if (string.IsNullOrEmpty(archiveSearchColumn))
                {
                    query = query.Where(u =>
                        (u.FullName != null && u.FullName.Contains(archiveSearchText, StringComparison.OrdinalIgnoreCase)) ||
                        (u.Email != null && u.Email.Contains(archiveSearchText, StringComparison.OrdinalIgnoreCase)) ||
                        (u.DeletedBy != null && u.DeletedBy.Contains(archiveSearchText, StringComparison.OrdinalIgnoreCase)));
                }
                else
                {
                    query = archiveSearchColumn switch
                    {
                        "FullName" => query.Where(u => u.FullName != null &&
                                  u.FullName.Contains(archiveSearchText, StringComparison.OrdinalIgnoreCase)),
                        "Email" => query.Where(u => u.Email != null &&
                                  u.Email.Contains(archiveSearchText, StringComparison.OrdinalIgnoreCase)),
                        "DeletedBy" => query.Where(u => u.DeletedBy != null &&
                                  u.DeletedBy.Contains(archiveSearchText, StringComparison.OrdinalIgnoreCase)),
                        _ => query
                    };
                }
            }

            filteredArchivedUsers = query.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при фильтрации архива: {ex.Message}");
            filteredArchivedUsers = archivedUsers;
        }
    }

    private void ResetFilters()
    {
        searchText = "";
        searchColumn = "";
        ApplyFilters();
    }

    private void ResetArchiveFilters()
    {
        archiveSearchText = "";
        archiveSearchColumn = "";
        ApplyArchiveFilters();
    }

    private void ShowUserDetails(User user)
    {
        selectedUser = user;
        showUserModal = true;
    }

    private void CloseUserModal()
    {
        showUserModal = false;
        selectedUser = null;
    }

    private void CloseUserDetails()
    {
        selectedUser = null;
    }

    private void ShowBlockUserDialog(User user)
    {
        userToBlock = user;
        showBlockDialog = true;
    }

    private void CloseBlockDialog()
    {
        showBlockDialog = false;
        userToBlock = null;
        blockReason = string.Empty;
    }

    private async Task ConfirmBlockUser()
    {
        if (userToBlock != null && !string.IsNullOrWhiteSpace(blockReason))
        {
            userToBlock.IsDeleted = true;
            userToBlock.DeletedAt = DateTime.Now;
            userToBlock.DeleteReason = blockReason;
            userToBlock.DeletedBy = $"{admin.FullName} ({admin.Role})"; 

            try
            {
                DbContext.Users.Update(userToBlock);
                await DbContext.SaveChangesAsync();
                await LoadUsers();
                CloseBlockDialog();
                CloseUserModal();
                await JSRuntime.InvokeVoidAsync("alert", "Пользователь успешно заблокирован");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, укажите причину блокировки");
        }
    }

    private async Task RestoreUser(User user)
    {
        user.IsDeleted = false;
        user.DeletedAt = null;
        user.DeleteReason = null;
        user.DeletedBy = null;

        try
        {
            DbContext.Users.Update(user);
            await DbContext.SaveChangesAsync();
            await LoadUsers();
            await JSRuntime.InvokeVoidAsync("alert", "Пользователь успешно восстановлен");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
    }

    private string FormatPhoneNumber(string phone)
    {
        if (string.IsNullOrEmpty(phone)) return string.Empty;
        var digits = new string(phone.Where(char.IsDigit).ToArray());
        if (digits.Length > 0 && digits[0] == '8') digits = '7' + digits[1..];
        return digits.Length switch
        {
            11 => $"+7({digits[1..4]}){digits[4..7]}-{digits[7..9]}-{digits[9..]}",
            _ => phone
        };
    }

    private void HandlePhoneInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var digits = new string(input.Where(char.IsDigit).ToArray());
        if (digits.Length > 0 && digits[0] == '8') digits = '7' + digits[1..];
        admin.PhoneNumber = digits;
        ValidatePhoneNumber(digits);
    }

    private void ValidatePhoneNumber(string digits)
    {
        phoneError = (digits.Length == 11 && (digits.StartsWith("7") || digits.StartsWith("8")))
            ? string.Empty
            : "Номер телефона должен содержать 11 цифр и начинаться с 7 или 8";
    }

    private string GetTabClass(bool isActive) => isActive ? "bg-blue-500 text-white" : "bg-gray-300 text-gray-800";

    private string GetRoleClass(string role) => role switch
    {
        "Admin" => "text-blue-600 font-semibold",
        "Owner" => "text-purple-600 font-bold",
        _ => "text-gray-600"
    };

    private string GetStatusClass(string status) => status switch
    {
        "Ожидайте звонок" => "text-green-500",
        "Отказано" => "text-red-500",
        "Отказано, ожидайте звонок" => "text-yellow-500",
        "В ожидании" => "text-orange-500",
        "Выполнено" => "text-blue-600 font-semibold",
        "Отменено" => "text-gray-500 line-through",
        _ => "text-gray-500"
    };

    private void ToggleFullNameEdit() => isFullNameDisabled = !isFullNameDisabled;
    private void TogglePhoneEdit() => isPhoneDisabled = !isPhoneDisabled;

    private async Task SaveChanges()
    {
        if (!string.IsNullOrEmpty(phoneError))
        {
            saveMessage = "Исправьте ошибки перед сохранением!";
            saveSuccess = false;
            StateHasChanged();
            return;
        }

        try
        {
            DbContext.Users.Update(admin);
            await DbContext.SaveChangesAsync();

            saveMessage = "Изменения успешно сохранены!";
            saveSuccess = true;
            isFullNameDisabled = true;
            isPhoneDisabled = true;

            admin = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == admin.Id);

            StateHasChanged();

            await Task.Delay(3000);
            saveMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            saveMessage = $"Ошибка при сохранении: {ex.Message}";
            saveSuccess = false;
            StateHasChanged();
        }
    }

    private async Task ChangeRole(User user)
    {
        if (user.Role == "Owner")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Нельзя изменить роль владельца!");
            return;
        }

        if (isChangingRole)
        {
            return;
        }

        isChangingRole = true;

        try
        {
            user.Role = user.Role == "User" ? "Admin" : "User";
            DbContext.Users.Update(user);
            await DbContext.SaveChangesAsync();
            await LoadUsers();
            await JSRuntime.InvokeVoidAsync("alert", "Роль пользователя успешно обновлена!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при изменении роли: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Произошла ошибка при изменении роли!");
        }
        finally
        {
            isChangingRole = false;
        }
    }


    private async Task HandleLogout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "userRole");
        NavigationManager.NavigateTo("/");
    }

    private void ShowChangePasswordModal()
    {
        showChangePasswordModal = true;
        codeSent = false;
        passwordChangeVerified = false;
        changePasswordError = "";
        passwordChangeCodeError = "";
        newPasswordError = "";
        changePasswordEmail = admin.Email;
    }

    private void CloseChangePasswordModal()
    {
        showChangePasswordModal = false;
    }

    private async Task SendPasswordChangeCode()
    {
        if (string.IsNullOrEmpty(changePasswordEmail))
        {
            changePasswordError = "Email обязателен";
            return;
        }

        if (!IsValidEmail(changePasswordEmail))
        {
            changePasswordError = "Email должен быть в домене mail.ru";
            return;
        }

        try
        {
            var random = new Random();
            generatedPasswordChangeCode = random.Next(100000, 999999).ToString();

            var success = await EmailService.SendConfirmationCodeAsync(changePasswordEmail, generatedPasswordChangeCode);

            if (success)
            {
                codeSent = true;
                changePasswordError = "";
            }
            else
            {
                changePasswordError = "Не удалось отправить код. Попробуйте позже.";
            }
        }
        catch (Exception ex)
        {
            changePasswordError = "Произошла ошибка: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

    private void VerifyPasswordChangeCode()
    {
        if (string.IsNullOrEmpty(passwordChangeCode))
        {
            passwordChangeCodeError = "Введите код";
            return;
        }

        if (passwordChangeCode != generatedPasswordChangeCode)
        {
            passwordChangeCodeError = "Неверный код";
            return;
        }

        passwordChangeVerified = true;
        passwordChangeCodeError = "";
    }

    private async Task ConfirmPasswordChange()
    {
        if (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmNewPassword))
        {
            newPasswordError = "Заполните все поля";
            return;
        }

        if (newPassword != confirmNewPassword)
        {
            newPasswordError = "Пароли не совпадают";
            return;
        }

        if (!IsValidPassword(newPassword))
        {
            newPasswordError = "Пароль должен содержать хотя бы одну заглавную букву, цифру, специальный символ и только английские буквы.";
            return;
        }

        try
        {
            var userToUpdate = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == changePasswordEmail);
            if (userToUpdate != null)
            {
                userToUpdate.Password = newPassword;
                await DbContext.SaveChangesAsync();

                CloseChangePasswordModal();
                await JSRuntime.InvokeVoidAsync("alert", "Пароль успешно изменен!");
            }
            else
            {
                newPasswordError = "Пользователь не найден";
            }
        }
        catch (Exception ex)
        {
            newPasswordError = "Ошибка при изменении пароля: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

    private void ToggleNewPasswordVisibility()
    {
        showNewPassword = !showNewPassword;
    }

    private bool IsValidEmail(string email)
    {
        return email.EndsWith("@mail.ru", StringComparison.OrdinalIgnoreCase);
    }

    private bool IsValidPassword(string password)
    {
        bool hasUpperCase = password.Any(char.IsUpper);
        bool hasDigit = password.Any(char.IsDigit);
        bool hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));
        bool isEnglishOnly = password.Where(char.IsLetter).All(c => (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));

        return hasUpperCase && hasDigit && hasSpecialChar && isEnglishOnly;
    }

    private async Task LoadStatistics()
    {
        totalUsers = await DbContext.Users.CountAsync();
        activeUsers = await DbContext.Users.CountAsync(u => !u.IsDeleted);
        archivedUsersCount = await DbContext.Users.CountAsync(u => u.IsDeleted);
        totalApplications = await DbContext.Applications.CountAsync();
        completedApplications = await DbContext.Applications.CountAsync(a => a.Status == "Выполнено");
        pendingApplications = await DbContext.Applications.CountAsync(a => a.Status == "В ожидании");
        servicesCount = await DbContext.Services.CountAsync();
        reviewsCount = await DbContext.Reviews.CountAsync();

        statusStats = await DbContext.Applications
            .GroupBy(a => a.Status)
            .Select(g => new { Status = g.Key, Count = g.Count() })
            .ToDictionaryAsync(x => x.Status, x => x.Count);

        servicesStats = await DbContext.ApplicationServices
            .Include(a => a.Service)
            .GroupBy(a => a.Service.Name)
            .Select(g => new { Service = g.Key, Count = g.Count() })
            .OrderByDescending(x => x.Count)
            .ToDictionaryAsync(x => x.Service, x => x.Count);

        var now = DateTime.Now;
        var sixMonthsAgo = now.AddMonths(-5); 

        var allMonths = Enumerable.Range(0, 6)
            .Select(offset => sixMonthsAgo.AddMonths(offset))
            .Select(date => new DateTime(date.Year, date.Month, 1))
            .ToList();

        var dbData = await DbContext.Applications
            .Where(a => a.CreatedAt >= sixMonthsAgo)
            .GroupBy(a => new { a.CreatedAt.Year, a.CreatedAt.Month })
            .Select(g => new
            {
                Date = new DateTime(g.Key.Year, g.Key.Month, 1),
                Count = g.Count()
            })
            .ToListAsync();

        monthlyApplications = allMonths
            .GroupJoin(dbData,
                month => month,
                dbItem => dbItem.Date,
                (month, dbItems) => new
                {
                    Month = month.ToString("MMMM yyyy"),
                    Count = dbItems.Sum(x => x?.Count ?? 0)
                })
            .ToDictionary(x => x.Month, x => x.Count);

        userRolesStats = await DbContext.Users
            .Where(u => !u.IsDeleted)
            .GroupBy(u => u.Role)
            .Select(g => new { Role = g.Key, Count = g.Count() })
            .ToDictionaryAsync(x => x.Role, x => x.Count);
    }

    private async Task RenderCharts()
    {
        if (activeTab != 3) return;

        try
        {
            await Task.WhenAll(
                JSRuntime.InvokeVoidAsync("destroyChart", "statusChart").AsTask(),
                JSRuntime.InvokeVoidAsync("destroyChart", "servicesChart").AsTask(),
                JSRuntime.InvokeVoidAsync("destroyChart", "applicationsChart").AsTask(),
                JSRuntime.InvokeVoidAsync("destroyChart", "usersChart").AsTask()
            );

            await Task.Delay(100);

            var colors = new
            {
                blue = "rgba(59, 130, 246, 0.8)",
                green = "rgba(16, 185, 129, 0.8)",
                orange = "rgba(245, 158, 11, 0.8)",
                red = "rgba(239, 68, 68, 0.8)",
                purple = "rgba(139, 92, 246, 0.8)",
                gray = "rgba(107, 114, 128, 0.8)"
            };

            var statusLabels = statusStats.Keys.ToArray();
            var statusData = statusStats.Values.ToArray();
            var statusColors = new[] { colors.blue, colors.green, colors.orange, colors.red, colors.gray };

            await JSRuntime.InvokeVoidAsync(
                "renderChart",
                "statusChart",
                statusChartType,
                "Распределение заявок по статусам",
                statusLabels,
                statusData,
                statusColors
            );

            var topServices = servicesStats.Take(10).ToDictionary(x => x.Key, x => x.Value);
            var serviceLabels = topServices.Keys.Select(s => s.Length > 20 ? s.Substring(0, 20) + "..." : s).ToArray();
            var serviceData = topServices.Values.ToArray();
            var serviceColors = Enumerable.Range(0, topServices.Count)
                .Select(i => $"hsl({(i * 360 / topServices.Count)}, 70%, 50%)")
                .ToArray();

            await JSRuntime.InvokeVoidAsync(
                "renderChart",
                "servicesChart",
                servicesChartType,
                "Популярные услуги",
                serviceLabels,
                serviceData,
                serviceColors
            );

            var monthLabels = monthlyApplications.Keys.ToArray();
            var monthData = monthlyApplications.Values.ToArray();

            await JSRuntime.InvokeVoidAsync(
                "renderLineChart",
                "applicationsChart",
                "Динамика заявок",
                monthLabels,
                monthData,
                "rgba(59, 130, 246, 0.8)"
            );

            var roleLabels = userRolesStats.Keys.ToArray();
            var roleData = userRolesStats.Values.ToArray();
            var roleColors = new[] { colors.blue, colors.green, colors.orange, colors.purple };

            await JSRuntime.InvokeVoidAsync(
                "renderChart",
                "usersChart",
                "doughnut",
                "Распределение пользователей по ролям",
                roleLabels,
                roleData,
                roleColors
            );
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при отрисовке графиков: {ex.Message}");
        }
    }

    private async Task ChangeStatusChartType(string type)
    {
        statusChartType = type;
        await RenderCharts();
    }

    private async Task ChangeServicesChartType(string type)
    {
        servicesChartType = type;
        await RenderCharts();
    }
}