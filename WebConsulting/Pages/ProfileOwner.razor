@page "/pOwner"
@using Microsoft.EntityFrameworkCore
@using WebConsulting.Models
@inject ConsultingDBContext DbContext
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IEmailService EmailService

<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Профиль главного администратора</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        html,
        body {
            height: 100%;
            margin: 0;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        main {
            flex-grow: 1;
        }

        .table-container {
            overflow-x: auto;
            max-width: 100%;
        }

        table {
            width: 100%;
            min-width: 800px;
        }

        th, td {
            padding: 0.5rem;
            text-align: left;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
            min-width: 150px;
        }

            .action-buttons button {
                width: 100%;
            }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 400px;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">
    <nav class="bg-gray-800 text-white p-4">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-xl font-bold">Панель Главного Администратора</h1>
            <div>
                <button @onclick="HandleLogout" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
                    Выйти
                </button>
            </div>
        </div>
    </nav>

    <main class="container mx-auto py-8 px-4 lg:px-16 min-h-[calc(95%-64px)]">
        <div class="flex flex-col md:flex-row mt-8">
            <div class="w-full md:w-1/4 p-4 bg-gray-200 mb-4 md:mb-0">
                <button class="w-full py-2 mb-4 rounded @GetTabClass(isUsersTab)"
                        @onclick="ShowUsersTab">
                    Управление пользователями
                </button>
                <button class="w-full py-2 rounded @GetTabClass(!isUsersTab)"
                        @onclick="ShowProfileTab">
                    Профиль
                </button>
            </div>

            <div class="w-full md:w-3/4 p-4 bg-white rounded-lg shadow-md">
                @if (isUsersTab)
                {
                    <div>
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Все пользователи</h2>

                        <div class="mb-4 flex flex-col md:flex-row gap-4">
                            <div class="flex-grow">
                                <input type="text" class="w-full p-2 border border-gray-300 rounded"
                                       placeholder="Поиск..." @bind="searchText" @bind:event="oninput" />
                            </div>
                            <div>
                                <select class="p-2 border border-gray-300 rounded" @bind="searchColumn">
                                    <option value="">Все столбцы</option>
                                    <option value="FullName">Имя</option>
                                    <option value="Email">Почта</option>
                                    <option value="Role">Роль</option>
                                </select>
                            </div>
                            <button @onclick="ApplyFilters" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Поиск
                            </button>
                            <button @onclick="ResetFilters" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                                Сбросить
                            </button>
                        </div>

                        @if (users == null || users.Count == 0)
                        {
                            <p class="text-gray-600">Нет пользователей.</p>
                        }
                        else
                        {
                            <div class="table-container">
                                <table class="table-auto bg-white">
                                    <thead class="bg-gray-200">
                                        <tr>
                                            <th class="px-2 py-2 text-sm">Имя</th>
                                            <th class="px-2 py-2 text-sm">Почта</th>
                                            <th class="px-2 py-2 text-sm">Роль</th>
                                            <th class="px-2 py-2 text-sm">Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in filteredUsers.Where(u => u.Role != "Owner"))
                                        {
                                            <tr class="border-t">
                                                <td class="px-2 py-2 text-sm">@user.FullName</td>
                                                <td class="px-2 py-2 text-sm">@user.Email</td>
                                                <td class="px-2 py-2 text-sm @GetRoleClass(user.Role)">@user.Role</td>
                                                <td class="px-2 py-2 text-sm">
                                                    <div class="action-buttons">
                                                        <button @onclick="() => ChangeRole(user)" class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 text-sm">
                                                            Изменить роль
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="bg-white p-6 rounded-lg">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Профиль главного администратора</h2>

                        @if (!string.IsNullOrEmpty(saveMessage))
                        {
                            <div class="@(saveSuccess ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700") p-3 rounded mb-4">
                                @saveMessage
                            </div>
                        }

                        <div class="mb-4">
                            <label for="fullName" class="block text-sm font-medium text-gray-700">Имя</label>
                            <input type="text" id="fullName" class="mt-1 block w-full p-2 border border-gray-300 rounded"
                                   @bind="admin.FullName" @bind:event="oninput" disabled="@isFullNameDisabled" />
                            <button @onclick="ToggleFullNameEdit" class="text-blue-500 mt-2 text-sm">
                                @if (isFullNameDisabled)
                                {
                                    <span>Редактировать</span>
                                }
                                else
                                {
                                    <span>Отменить</span>
                                }
                            </button>
                        </div>

                        <div class="mb-4">
                            <label for="phone" class="block text-sm font-medium text-gray-700">Телефон</label>
                            @if (isPhoneDisabled)
                            {
                                <div class="mt-1 block w-full p-2 border border-gray-300 rounded bg-gray-100">
                                    @FormatPhoneNumber(admin.PhoneNumber)
                                </div>
                            }
                            else
                            {
                                <input type="text" id="phone" class="mt-1 block w-full p-2 border border-gray-300 rounded"
                                       value="@admin.PhoneNumber"
                                       @oninput="HandlePhoneInput" />
                            }
                            <button @onclick="TogglePhoneEdit" class="text-blue-500 mt-2 text-sm">
                                @if (isPhoneDisabled)
                                {
                                    <span>Редактировать</span>
                                }
                                else
                                {
                                    <span>Отменить</span>
                                }
                            </button>
                            @if (!string.IsNullOrEmpty(phoneError))
                            {
                                <p class="text-red-500 text-sm mt-1">@phoneError</p>
                            }
                        </div>

                        <div class="mb-4">
                            <label for="email" class="block text-sm font-medium text-gray-700">Почта</label>
                            <input type="email" id="email" class="mt-1 block w-full p-2 border border-gray-300 rounded"
                                   @bind="admin.Email" disabled />
                        </div>

                        <div class="mb-4">
                            <button @onclick="ShowChangePasswordModal"
                                    class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600">
                                Изменить пароль
                            </button>
                        </div>

                        @if (!isFullNameDisabled || !isPhoneDisabled)
                        {
                            <button @onclick="SaveChanges" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                Сохранить изменения
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </main>

    @if (showChangePasswordModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                @if (!codeSent)
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Изменение пароля</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Ваш email:</label>
                        <input type="email" @bind="changePasswordEmail" class="w-full px-4 py-2 border rounded-md" disabled />
                        @if (!string.IsNullOrEmpty(changePasswordError))
                        {
                            <p class="text-red-500 text-sm mt-1">@changePasswordError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseChangePasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="SendPasswordChangeCode" class="bg-blue-500 text-white px-4 py-2 rounded">Отправить код</button>
                    </div>
                }
                else if (!passwordChangeVerified)
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Подтверждение кода</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Введите код из письма:</label>
                        <input type="text" @bind="passwordChangeCode" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(passwordChangeCodeError))
                        {
                            <p class="text-red-500 text-sm mt-1">@passwordChangeCodeError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseChangePasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="VerifyPasswordChangeCode" class="bg-blue-500 text-white px-4 py-2 rounded">Продолжить</button>
                    </div>
                }
                else
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Новый пароль</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Новый пароль:</label>
                        <div class="relative">
                            <input type="@(showNewPassword ? "text" : "password")" @bind="newPassword" class="w-full px-4 py-2 border rounded-md" />
                            <button type="button" @onclick="ToggleNewPasswordVisibility" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600">
                                @if (showNewPassword)
                                {
                                    <span>🙈</span>
                                }
                                else
                                {
                                    <span>👁️</span>
                                }
                            </button>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Повторите пароль:</label>
                        <input type="password" @bind="confirmNewPassword" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(newPasswordError))
                        {
                            <p class="text-red-500 text-sm mt-1">@newPasswordError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseChangePasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="ConfirmPasswordChange" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    </div>
                }
            </div>
        </div>
    }
</body>

</html>

@code {
    private bool isUsersTab = true;
    private bool isFullNameDisabled = true;
    private bool isPhoneDisabled = true;
    private List<User> users = new();
    private List<User> filteredUsers = new();
    private User admin = new();
    private string phoneError = string.Empty;

    // Для сообщений о сохранении
    private string saveMessage = "";
    private bool saveSuccess = false;

    // Для изменения пароля
    private bool showChangePasswordModal = false;
    private string changePasswordEmail = "";
    private string changePasswordError = "";
    private bool codeSent = false;
    private string passwordChangeCode = "";
    private string generatedPasswordChangeCode = "";
    private string passwordChangeCodeError = "";
    private bool passwordChangeVerified = false;
    private string newPassword = "";
    private string confirmNewPassword = "";
    private string newPasswordError = "";
    private bool showNewPassword = false;

    // Для фильтрации
    private string searchText = "";
    private string searchColumn = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await DbContext.Users.ToListAsync();
            filteredUsers = users;
            admin = await DbContext.Users.FirstOrDefaultAsync(u => u.Role == "Owner") ?? new User();
            changePasswordEmail = admin.Email;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
            users = new List<User>();
            filteredUsers = new List<User>();
        }
    }

    private void ShowUsersTab()
    {
        isUsersTab = true;
        ApplyFilters();
    }

    private void ShowProfileTab() => isUsersTab = false;

    private void ApplyFilters()
    {
        try
        {
            var query = users.Where(u => u.Role != "Owner").AsQueryable(); 

            if (!string.IsNullOrEmpty(searchText))
            {
                if (string.IsNullOrEmpty(searchColumn))
                {
                    query = query.Where(u =>
                        (u.FullName != null && u.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                        (u.Email != null && u.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)) ||
                        (u.Role != null && u.Role.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
                }
                else
                {
                    query = searchColumn switch
                    {
                        "FullName" => query.Where(u => u.FullName != null &&
                                  u.FullName.Contains(searchText, StringComparison.OrdinalIgnoreCase)),
                        "Email" => query.Where(u => u.Email != null &&
                                  u.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase)),
                        "Role" => query.Where(u => u.Role != null &&
                                  u.Role.Contains(searchText, StringComparison.OrdinalIgnoreCase)),
                        _ => query
                    };
                }
            }

            filteredUsers = query.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при фильтрации: {ex.Message}");
            filteredUsers = users.Where(u => u.Role != "Owner").ToList();
        }
    }

    private void ResetFilters()
    {
        searchText = "";
        searchColumn = "";
        ApplyFilters();
    }

    private string FormatPhoneNumber(string phone)
    {
        if (string.IsNullOrEmpty(phone)) return string.Empty;
        var digits = new string(phone.Where(char.IsDigit).ToArray());
        if (digits.Length > 0 && digits[0] == '8') digits = '7' + digits[1..];
        return digits.Length switch
        {
            11 => $"+7({digits[1..4]}){digits[4..7]}-{digits[7..9]}-{digits[9..]}",
            _ => phone
        };
    }

    private void HandlePhoneInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        var digits = new string(input.Where(char.IsDigit).ToArray());
        if (digits.Length > 0 && digits[0] == '8') digits = '7' + digits[1..];
        admin.PhoneNumber = digits;
        ValidatePhoneNumber(digits);
    }

    private void ValidatePhoneNumber(string digits)
    {
        phoneError = (digits.Length == 11 && (digits.StartsWith("7") || digits.StartsWith("8")))
            ? string.Empty
            : "Номер телефона должен содержать 11 цифр и начинаться с 7 или 8";
    }

    private string GetTabClass(bool isActive) => isActive ? "bg-blue-500 text-white" : "bg-gray-300 text-gray-800";

    private string GetRoleClass(string role) => role switch
    {
        "Admin" => "text-blue-600 font-semibold",
        "Owner" => "text-purple-600 font-bold",
        _ => "text-gray-600"
    };

    private void ToggleFullNameEdit() => isFullNameDisabled = !isFullNameDisabled;
    private void TogglePhoneEdit() => isPhoneDisabled = !isPhoneDisabled;

    private async Task SaveChanges()
    {
        if (!string.IsNullOrEmpty(phoneError))
        {
            saveMessage = "Исправьте ошибки перед сохранением!";
            saveSuccess = false;
            StateHasChanged();
            return;
        }

        try
        {
            DbContext.Users.Update(admin);
            await DbContext.SaveChangesAsync();

            saveMessage = "Изменения успешно сохранены!";
            saveSuccess = true;
            isFullNameDisabled = true;
            isPhoneDisabled = true;

            // Обновляем данные пользователя
            admin = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == admin.Id);

            StateHasChanged();

            // Автоматически скрываем сообщение через 3 секунды
            await Task.Delay(3000);
            saveMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            saveMessage = $"Ошибка при сохранении: {ex.Message}";
            saveSuccess = false;
            StateHasChanged();
        }
    }

    private async Task ChangeRole(User user)
    {
        if (user.Role == "Owner")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Нельзя изменить роль владельца!");
            return;
        }

        user.Role = user.Role == "User" ? "Admin" : "User";

        try
        {
            DbContext.Users.Update(user);
            await DbContext.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Роль пользователя успешно обновлена!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при изменении роли: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Произошла ошибка при изменении роли!");
        }
    }

    private async Task HandleLogout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "userRole");
        NavigationManager.NavigateTo("/");
    }

    // Методы для изменения пароля
    private void ShowChangePasswordModal()
    {
        showChangePasswordModal = true;
        codeSent = false;
        passwordChangeVerified = false;
        changePasswordError = "";
        passwordChangeCodeError = "";
        newPasswordError = "";
        changePasswordEmail = admin.Email;
    }

    private void CloseChangePasswordModal()
    {
        showChangePasswordModal = false;
    }

    private async Task SendPasswordChangeCode()
    {
        if (string.IsNullOrEmpty(changePasswordEmail))
        {
            changePasswordError = "Email обязателен";
            return;
        }

        if (!IsValidEmail(changePasswordEmail))
        {
            changePasswordError = "Email должен быть в домене mail.ru";
            return;
        }

        try
        {
            // Генерируем случайный 6-значный код
            var random = new Random();
            generatedPasswordChangeCode = random.Next(100000, 999999).ToString();

            // Отправляем код на email
            var success = await EmailService.SendConfirmationCodeAsync(changePasswordEmail, generatedPasswordChangeCode);

            if (success)
            {
                codeSent = true;
                changePasswordError = "";
            }
            else
            {
                changePasswordError = "Не удалось отправить код. Попробуйте позже.";
            }
        }
        catch (Exception ex)
        {
            changePasswordError = "Произошла ошибка: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

    private void VerifyPasswordChangeCode()
    {
        if (string.IsNullOrEmpty(passwordChangeCode))
        {
            passwordChangeCodeError = "Введите код";
            return;
        }

        if (passwordChangeCode != generatedPasswordChangeCode)
        {
            passwordChangeCodeError = "Неверный код";
            return;
        }

        passwordChangeVerified = true;
        passwordChangeCodeError = "";
    }

    private async Task ConfirmPasswordChange()
    {
        if (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmNewPassword))
        {
            newPasswordError = "Заполните все поля";
            return;
        }

        if (newPassword != confirmNewPassword)
        {
            newPasswordError = "Пароли не совпадают";
            return;
        }

        if (!IsValidPassword(newPassword))
        {
            newPasswordError = "Пароль должен содержать хотя бы одну заглавную букву, цифру, специальный символ и только английские буквы.";
            return;
        }

        try
        {
            var userToUpdate = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == changePasswordEmail);
            if (userToUpdate != null)
            {
                userToUpdate.Password = newPassword;
                await DbContext.SaveChangesAsync();

                CloseChangePasswordModal();
                await JSRuntime.InvokeVoidAsync("alert", "Пароль успешно изменен!");
            }
            else
            {
                newPasswordError = "Пользователь не найден";
            }
        }
        catch (Exception ex)
        {
            newPasswordError = "Ошибка при изменении пароля: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

    private void ToggleNewPasswordVisibility()
    {
        showNewPassword = !showNewPassword;
    }

    private bool IsValidEmail(string email)
    {
        return email.EndsWith("@mail.ru", StringComparison.OrdinalIgnoreCase);
    }

    private bool IsValidPassword(string password)
    {
        bool hasUpperCase = password.Any(char.IsUpper);
        bool hasDigit = password.Any(char.IsDigit);
        bool hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));
        bool isEnglishOnly = password.Where(char.IsLetter).All(c => (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));

        return hasUpperCase && hasDigit && hasSpecialChar && isEnglishOnly;
    }
}