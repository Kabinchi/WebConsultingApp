@page "/"
@inject IJSRuntime JSRuntime
@layout MainLayout
@implements IDisposable
@using Microsoft.AspNetCore.Components.Forms
@using WebConsulting.Models
@using System.ComponentModel.DataAnnotations
@inject ConsultingDBContext DbContext

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reputation - Consulting Company</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-800">

    @if (showModal && !IsAuthenticated)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-gray-800">Ответим на ваши вопросы</h3>
                    <button @onclick="CloseModal" class="text-gray-500 hover:text-gray-700">&times;</button>
                </div>
                <p class="text-gray-600 mb-4">Наш консультант даст экспертный ответ.</p>

                <EditForm Model="@formData" OnValidSubmit="HandleSubmit" class="space-y-4">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-500 mb-4" />

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Имя *</label>
                        <InputText @bind-Value="formData.Name"
                                   class="w-full px-3 py-2 border rounded-md focus:ring-orange-500 focus:border-orange-500" />
                        <ValidationMessage For="@(() => formData.Name)" class="text-red-500 text-sm" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Телефон *</label>
                        <InputText @bind-Value="formData.Phone"
                                   class="w-full px-3 py-2 border rounded-md focus:ring-orange-500 focus:border-orange-500" />
                        <ValidationMessage For="@(() => formData.Phone)" class="text-red-500 text-sm" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">E-mail *</label>
                        <InputText @bind-Value="formData.Email"
                                   class="w-full px-3 py-2 border rounded-md focus:ring-orange-500 focus:border-orange-500" />
                        <ValidationMessage For="@(() => formData.Email)" class="text-red-500 text-sm" />
                    </div>

                    <button type="submit"
                            class="w-full bg-orange-500 text-white py-2 px-4 rounded-md hover:bg-orange-600 transition-colors">
                        Задать вопрос
                    </button>
                </EditForm>
            </div>
        </div>
    }
    <section class="bg-white py-16">
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
            <div>
                <h1 class="text-4xl font-bold text-gray-800">О компании Reputation</h1>
                <p class="mt-4 text-gray-600">Reputation — это консалтинговое агентство, которое специализируется на предоставлении услуг по консультированию, аналитике и бизнес-анализу, систематизации и оптимизации деятельности малых и средних предприятий. Наши консультанты и аналитики понимают уникальные задачи, с которыми сталкиваются компании, и оказывают комплексную поддержку менеджменту по следующим направлениям:</p>
                <ul class="list-disc ml-8 mt-4 text-gray-600">
                    <li><strong>Консультирование и профессиональный консалтинг для бизнеса</strong>: Помогаем компаниям развивать устойчивые стратегии и предоставляем практическую поддержку, обеспечивая их долгосрочное развитие.</li>
                    <li><strong>Аналитика</strong>: Исследуем данные для выявления закономерностей, трендов и новых возможностей, которые помогут бизнесу продвигаться вперёд.</li>
                    <li><strong>Управление компанией</strong>: Разрабатываем структуры, создаём и внедряем системы KPI и BSC, эффективно управляем ресурсами и повышаем их отдачу.</li>
                    <li><strong>Анализ предприятия</strong>: Проводим тщательную оценку текущего состояния внутренней и внешней среды организации, чтобы выявить точки роста и улучшения.</li>
                    <li><strong>Повышение эффективности</strong>: Оптимизируем процессы и организационные структуры, повышаем продуктивность персонала и снижаем операционные издержки.</li>
                    <li><strong>Непрерывное улучшение</strong>: Внедряем системы менеджмента качества ISO 9001 и лучшие мировые практики, чтобы обеспечить постоянное совершенствование и развитие бизнеса.</li>
                </ul>
                <p class="mt-4 text-gray-600">Мы стремимся к тому, чтобы наши клиенты достигали своих стратегических целей и планов, получая при этом высококлассные консалтинговые услуги, адаптированные под их индивидуальные потребности.</p>
                <p class="mt-4 text-gray-800 font-bold">Reputation — доверие и профессионализм в каждом шаге!</p>
            </div>
            <img src="/images/main1.jpg" alt="Team at work" class="rounded-lg shadow-md">
        </div>
    </section>


    <section class="bg-gray-50 py-16">
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
            <img src="/images/main2.jpg" alt="Mission" class="rounded-lg shadow-md">
            <div>
                <h2 class="text-2xl font-bold text-gray-800">Наша миссия</h2>
                <p class="mt-4 text-gray-600">Наша миссия заключается в том, чтобы выявлять и развивать внутренние возможности наших клиентов для роста и устойчивого развития. Мы стремимся к созданию таких решений, которые будут не только отвечать текущим потребностям бизнеса, но и способствовать его долгосрочному успеху.</p>
                <p class="mt-4 text-gray-600">Мы верим в индивидуальный подход к каждому клиенту и стремимся к тому, чтобы наши рекомендации и стратегии приносили реальные результаты. Наша цель — сделать бизнес наших клиентов более эффективным, устойчивым и конкурентоспособным.</p>
                <p class="mt-4 text-gray-600">Reputation — это не просто консалтинговое агентство, это ваш партнёр на пути к успеху, готовый поддержать и направить в любой ситуации.</p>
            </div>
        </div>
    </section>

    @if (!IsAuthenticated)
    {
    <section class="bg-white py-16">
        <div class="container mx-auto max-w-2xl">
            <div class="bg-gray-50 rounded-xl shadow-md p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Задать вопрос</h2>
                <EditForm Model="@formData" OnValidSubmit="HandleSubmit" class="space-y-4">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-500 mb-4" />

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Имя *</label>
                            <InputText @bind-Value="formData.Name"
                                       class="w-full px-3 py-2 border rounded-md focus:ring-orange-500 focus:border-orange-500" />
                            <ValidationMessage For="@(() => formData.Name)" class="text-red-500 text-sm" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Телефон *</label>
                            <InputText @bind-Value="formData.Phone"
                                       class="w-full px-3 py-2 border rounded-md focus:ring-orange-500 focus:border-orange-500" />
                            <ValidationMessage For="@(() => formData.Phone)" class="text-red-500 text-sm" />
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">E-mail *</label>
                        <InputText @bind-Value="formData.Email"
                                   class="w-full px-3 py-2 border rounded-md focus:ring-orange-500 focus:border-orange-500" />
                        <ValidationMessage For="@(() => formData.Email)" class="text-red-500 text-sm" />
                    </div>

                    <button type="submit"
                            class="w-full bg-orange-500 text-white py-2 px-4 rounded-md hover:bg-orange-600 transition-colors">
                        Отправить вопрос
                    </button>
                </EditForm>
            </div>
        </div>
    </section>
    }
    <section class="bg-white py-16">
        <div class="container mx-auto text-center">
            <h2 class="text-3xl font-bold text-gray-800">Мы в цифрах</h2>
            <div class="mt-8 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8">
                <div class="p-4 bg-gray-50 rounded-lg shadow">
                    <h3 class="text-2xl font-bold text-orange-500">2022</h3>
                    <p class="mt-2 text-gray-600">Год выхода на рынок</p>
                </div>
                <div class="p-4 bg-gray-50 rounded-lg shadow">
                    <h3 class="text-2xl font-bold text-orange-500">7+</h3>
                    <p class="mt-2 text-gray-600">Специалистов</p>
                </div>
                <div class="p-4 bg-gray-50 rounded-lg shadow">
                    <h3 class="text-2xl font-bold text-orange-500">40</h3>
                    <p class="mt-2 text-gray-600">Проектов</p>
                </div>
                <div class="p-4 bg-gray-50 rounded-lg shadow">
                    <h3 class="text-2xl font-bold text-orange-500">7+</h3>
                    <p class="mt-2 text-gray-600">Лет опыта</p>
                </div>
            </div>
        </div>
    </section>

    <section class="bg-gray-50 py-16">
        <div class="container mx-auto grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
            <div>
                <h2 class="text-2xl font-bold text-gray-800">Контакты</h2>
                <p class="mt-4 text-gray-600">Россия</p>
                <p class="mt-2 text-gray-600">info@Reputation.ru</p>
                <button class="mt-4 bg-orange-500 text-white px-4 py-2 rounded">Связаться с нами</button>
            </div>
            <div class="w-full h-96 px-4 lg:px-0">
                <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d934.5023011326357!2d40.37185519979489!3d56.146149483426996!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x414c7bfa4e538e7f%3A0xab6a6d19c32d34f6!2z0JLQu9Cw0LTQuNC80LjRgNGB0LrQuNC5INCT0L7RgdGD0LTQsNGA0YHRgtCy0LXQvdC90YvQuSDRg9C90LjQstC10YDRgdC40YLQtdGC!5e0!3m2!1sru!2sru!4v1733826991888!5m2!1sru!2sru
"
                        width="100%" height="100%" style="border:0;" allowfullscreen="" loading="lazy"></iframe>
            </div>
        </div>
    </section>

</body>
</html>

@code {
    private bool showModal = false;
    private Timer timer;
    private FormData formData = new FormData();

    public class FormData
    {
        [Required(ErrorMessage = "Имя обязательно для заполнения")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Телефон обязателен для заполнения")]
        [RegularExpression(@"^7\d{10}$",
            ErrorMessage = "Номер должен начинаться с 7 и содержать 11 цифр")]
        public string Phone { get; set; }

        [Required(ErrorMessage = "Email обязателен для заполнения")]
        [EmailAddress(ErrorMessage = "Некорректный формат email")]
        public string Email { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                UserRole = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userRole");
                IsAuthenticated = new[] { "Admin", "Owner", "User" }.Contains(UserRole);
                StateHasChanged();

                if (!IsAuthenticated)
                {
                    timer = new Timer(_ =>
                    {
                        showModal = true;
                        InvokeAsync(StateHasChanged);
                    }, null, 30000, Timeout.Infinite);
                }
            }
            catch
            {
            }
        }
    }

    private void CloseModal()
    {
        showModal = false;
        timer?.Dispose();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        try
        {
            // Проверка авторизации
            if (IsAuthenticated)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Авторизованные пользователи не могут отправлять гостевые заявки");
                showModal = false;
                formData = new FormData();
                return;
            }

            // Валидация номера телефона
            if (formData.Phone?.Length != 11 || !formData.Phone.StartsWith("7"))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Некорректный формат телефона");
                return;
            }

            var guestApp = new GuestApplication
                {
                    FullName = formData.Name?.Trim() ?? "",
                    Phone = formData.Phone,
                    Email = formData.Email?.Trim() ?? "",
                    CreatedAt = DateTime.Now,
                    Status = "Новая"
                };

            DbContext.GuestApplications.Add(guestApp);
            await DbContext.SaveChangesAsync();

            formData = new FormData();
            showModal = false;

            await JSRuntime.InvokeVoidAsync("alert", "Спасибо! Ваш вопрос отправлен.");
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
        GC.SuppressFinalize(this);
    }


    private string UserRole { get; set; }
    private bool IsAuthenticated { get; set; }


}