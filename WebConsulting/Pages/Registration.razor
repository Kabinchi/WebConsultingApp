@page "/Registration"
@using WebConsulting.Models
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Регистрация | Reputation</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        html,
        body {
            height: 100%;
            margin: 0;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        main {
            flex-grow: 1;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">

    <main class="container mx-auto py-8 px-4 lg:px-16 min-h-[calc(95%-64px)]">
        <div class="bg-white p-8 shadow-lg rounded-lg max-w-md mx-auto">
            <h1 class="text-2xl font-bold text-gray-800 mb-6">Авторизация</h1>
            <form @onsubmit="HandleLogin">
                <div class="mb-4">
                    <label for="loginEmail" class="block text-sm font-medium text-gray-600">E-mail:</label>
                    <input type="email" id="loginEmail" @bind="Email" placeholder="sample@domain.ru" class="mt-1 w-full px-4 py-2 border rounded-md focus:ring focus:ring-orange-200 focus:outline-none" />
                </div>
                <div class="mb-4">
                    <label for="loginPassword" class="block text-sm font-medium text-gray-600">Пароль:</label>
                    <div class="relative">
                        <input type="@PasswordInputType" id="loginPassword" @bind="Password" placeholder="********" class="mt-1 w-full px-4 py-2 border rounded-md focus:ring focus:ring-orange-200 focus:outline-none" />
                        <button type="button" @onclick="TogglePasswordVisibility" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600">
                            @if (IsPasswordVisible)
                            {
                                <span>🙈</span>
                            }
                            else
                            {
                                <span>👁️</span>
                            }
                        </button>
                    </div>
                </div>
                <div class="flex items-center justify-between">
                    <button type="submit" class="bg-orange-500 text-white px-6 py-2 rounded hover:bg-orange-600">Вход</button>
                    <button type="button" @onclick="NavigateToRegistrationPage" class="text-orange-500 hover:text-orange-600">Регистрация</button>
                </div>
            </form>
        </div>
    </main>

    <div id="callbackModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white p-6 rounded-lg shadow-lg w-96">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Перезвонить</h3>
            <form action="#" method="POST" class="space-y-4">
                <div>
                    <label for="name" class="block text-gray-600">Имя</label>
                    <input type="text" id="name" name="name" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500">
                </div>
                <div>
                    <label for="phone" class="block text-gray-600">Номер телефона</label>
                    <input type="tel" id="phone" name="phone" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500">
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" onclick="closeCallbackModal();" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Отмена</button>
                    <button type="submit" class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600">Отправить</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        function openCallbackModal() {
            document.getElementById('callbackModal').classList.remove('hidden');
        }

        function closeCallbackModal() {
            document.getElementById('callbackModal').classList.add('hidden');
        }
    </script>
</body>

</html>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }

    private bool IsPasswordVisible { get; set; } = false;
    private string PasswordInputType => IsPasswordVisible ? "text" : "password";

    private async Task HandleLogin()
    {
        try
        {
            using var context = new ConsultingDBContext();
            var user = context.Users.FirstOrDefault(u => u.Email == Email);

            if (user != null && user.Password == Password)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userRole", user.Role);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userSession", user.Email);

                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Неверный логин или пароль";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Произошла ошибка при авторизации. Попробуйте позже.";
            Console.WriteLine(ex.Message);
        }
    }

    @inject IJSRuntime JSRuntime

    private void NavigateToRegistrationPage()
    {
        NavigationManager.NavigateTo("/Regis");
    }

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }
}
