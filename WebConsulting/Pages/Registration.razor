@page "/Registration"
@using WebConsulting.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IEmailService EmailService

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Авторизация | Reputation</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        html, body {
            height: 100%;
            margin: 0;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        main {
            flex-grow: 1;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            width: 100%;
            max-width: 400px;
        }
    </style>
</head>

<body class="bg-gray-100 text-gray-800">
    <main class="container mx-auto py-8 px-4 lg:px-16 min-h-[calc(95%-64px)]">
        <div class="bg-white p-8 shadow-lg rounded-lg max-w-md mx-auto">
            <h1 class="text-2xl font-bold text-gray-800 mb-6">Авторизация</h1>
            <form @onsubmit="HandleLogin">
                <div class="mb-4">
                    <label for="loginEmail" class="block text-sm font-medium text-gray-600">E-mail:</label>
                    <input type="email" id="loginEmail" @bind="Email" placeholder="sample@mail.ru"
                           class="mt-1 w-full px-4 py-2 border rounded-md focus:ring focus:ring-orange-200 focus:outline-none" />
                    @if (!string.IsNullOrEmpty(EmailError))
                    {
                        <p class="text-red-500 text-sm mt-1">@EmailError</p>
                    }
                </div>
                <div class="mb-4">
                    <label for="loginPassword" class="block text-sm font-medium text-gray-600">Пароль:</label>
                    <div class="relative">
                        <input type="@PasswordInputType" id="loginPassword" @bind="Password" placeholder="********"
                               class="mt-1 w-full px-4 py-2 border rounded-md focus:ring focus:ring-orange-200 focus:outline-none" />
                        <button type="button" @onclick="TogglePasswordVisibility" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600">
                            @if (IsPasswordVisible)
                            {
                                <span>🙈</span>
                            }
                            else
                            {
                                <span>👁️</span>
                            }
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(PasswordError))
                    {
                        <p class="text-red-500 text-sm mt-1">@PasswordError</p>
                    }
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <p class="text-red-500 text-sm mt-1">@ErrorMessage</p>
                }
                <div class="flex items-center justify-between mb-4">
                    <button type="submit" class="bg-orange-500 text-white px-6 py-2 rounded hover:bg-orange-600">Вход</button>
                    <button type="button" @onclick="NavigateToRegistrationPage" class="text-orange-500 hover:text-orange-600">Регистрация</button>
                </div>
                <div class="text-center">
                    <button type="button" @onclick="ShowForgotPasswordModal" class="text-blue-500 hover:text-blue-600 text-sm">Забыли пароль?</button>
                </div>
            </form>
        </div>
    </main>

    <!-- Модальное окно восстановления пароля -->
    @if (showForgotPasswordModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                @if (!codeSent)
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Восстановление пароля</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Введите ваш email:</label>
                        <input type="email" @bind="forgotPasswordEmail" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(forgotPasswordError))
                        {
                            <p class="text-red-500 text-sm mt-1">@forgotPasswordError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseForgotPasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="SendResetCode" class="bg-blue-500 text-white px-4 py-2 rounded">Отправить код</button>
                    </div>
                }
                else if (!passwordResetVerified)
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Подтверждение кода</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Введите код из письма:</label>
                        <input type="text" @bind="resetCode" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(resetCodeError))
                        {
                            <p class="text-red-500 text-sm mt-1">@resetCodeError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseForgotPasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="VerifyResetCode" class="bg-blue-500 text-white px-4 py-2 rounded">Продолжить</button>
                    </div>
                }
                else
                {
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Новый пароль</h2>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Новый пароль:</label>
                        <input type="password" @bind="newPassword" class="w-full px-4 py-2 border rounded-md" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Повторите пароль:</label>
                        <input type="password" @bind="confirmPassword" class="w-full px-4 py-2 border rounded-md" />
                        @if (!string.IsNullOrEmpty(passwordResetError))
                        {
                            <p class="text-red-500 text-sm mt-1">@passwordResetError</p>
                        }
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button @onclick="CloseForgotPasswordModal" class="px-4 py-2 border rounded">Отмена</button>
                        <button @onclick="ResetPassword" class="bg-blue-500 text-white px-4 py-2 rounded">Сохранить</button>
                    </div>
                }
            </div>
        </div>
    }
</body>

</html>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }
    private string EmailError { get; set; }
    private string PasswordError { get; set; }
    private bool IsPasswordVisible { get; set; } = false;
    private string PasswordInputType => IsPasswordVisible ? "text" : "password";

    // Восстановление пароля
    private bool showForgotPasswordModal = false;
    private string forgotPasswordEmail = "";
    private string forgotPasswordError = "";
    private bool codeSent = false;
    private string resetCode = "";
    private string generatedResetCode = "";
    private string resetCodeError = "";
    private bool passwordResetVerified = false;
    private string newPassword = "";
    private string confirmPassword = "";
    private string passwordResetError = "";

    private void ShowForgotPasswordModal()
    {
        showForgotPasswordModal = true;
        codeSent = false;
        passwordResetVerified = false;
        forgotPasswordError = "";
        resetCodeError = "";
        passwordResetError = "";
    }

    private void CloseForgotPasswordModal()
    {
        showForgotPasswordModal = false;
    }

    private async Task SendResetCode()
    {
        if (string.IsNullOrEmpty(forgotPasswordEmail))
        {
            forgotPasswordError = "Введите email";
            return;
        }

        if (!IsValidEmail(forgotPasswordEmail))
        {
            forgotPasswordError = "Email должен быть в домене mail.ru";
            return;
        }

        try
        {
            using var context = new ConsultingDBContext();
            var user = context.Users.FirstOrDefault(u => u.Email == forgotPasswordEmail);

            if (user == null)
            {
                forgotPasswordError = "Пользователь с таким email не найден";
                return;
            }

            // Генерируем случайный 6-значный код
            var random = new Random();
            generatedResetCode = random.Next(100000, 999999).ToString();

            // Отправляем код на email
            var success = await EmailService.SendConfirmationCodeAsync(forgotPasswordEmail, generatedResetCode);

            if (success)
            {
                codeSent = true;
                forgotPasswordError = "";
            }
            else
            {
                forgotPasswordError = "Не удалось отправить код. Попробуйте позже.";
            }
        }
        catch (Exception ex)
        {
            forgotPasswordError = "Произошла ошибка: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

    private void VerifyResetCode()
    {
        if (string.IsNullOrEmpty(resetCode))
        {
            resetCodeError = "Введите код";
            return;
        }

        if (resetCode != generatedResetCode)
        {
            resetCodeError = "Неверный код";
            return;
        }

        passwordResetVerified = true;
        resetCodeError = "";
    }

    private async Task ResetPassword()
    {
        if (string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            passwordResetError = "Заполните все поля";
            return;
        }

        if (newPassword != confirmPassword)
        {
            passwordResetError = "Пароли не совпадают";
            return;
        }

        if (!IsValidPassword(newPassword))
        {
            passwordResetError = "Пароль должен содержать хотя бы одну заглавную букву, цифру, специальный символ и только английские буквы.";
            return;
        }

        try
        {
            using var context = new ConsultingDBContext();
            var user = context.Users.FirstOrDefault(u => u.Email == forgotPasswordEmail);

            if (user != null)
            {
                user.Password = newPassword;
                await context.SaveChangesAsync();

                // Закрываем модальное окно
                showForgotPasswordModal = false;
                await JSRuntime.InvokeVoidAsync("alert", "Пароль успешно изменен!");
            }
            else
            {
                passwordResetError = "Пользователь не найден";
            }
        }
        catch (Exception ex)
        {
            passwordResetError = "Ошибка при изменении пароля: " + ex.Message;
            Console.WriteLine(ex);
        }
    }

    private async Task HandleLogin()
    {
        EmailError = string.Empty;
        PasswordError = string.Empty;
        ErrorMessage = string.Empty;

        if (string.IsNullOrEmpty(Email))
        {
            EmailError = "E-mail обязателен";
            return;
        }

        if (!IsValidEmail(Email))
        {
            EmailError = "E-mail должен быть в домене mail.ru";
            return;
        }

        if (string.IsNullOrEmpty(Password))
        {
            PasswordError = "Пароль обязателен";
            return;
        }

        if (!IsValidPassword(Password))
        {
            PasswordError = "Пароль должен содержать хотя бы одну заглавную букву, цифру, специальный символ и только английские буквы.";
            return;
        }

        try
        {
            using var context = new ConsultingDBContext();
            var user = context.Users.FirstOrDefault(u => u.Email == Email);

            if (user == null)
            {
                ErrorMessage = "Неверный логин или пароль";
                return;
            }

            // Проверка на блокировку пользователя
            if (user.IsDeleted)
            {
                ErrorMessage = "Пользователь заблокирован.";
                return;
            }

            if (user.Password == Password)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userRole", user.Role);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userSession", user.Email);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "userId", user.Id);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Неверный логин или пароль";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Произошла ошибка при авторизации. Попробуйте позже.";
            Console.WriteLine(ex.Message);
        }
    }

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }

    private void NavigateToRegistrationPage()
    {
        NavigationManager.NavigateTo("/Regis");
    }

    private bool IsValidEmail(string email)
    {
        return email.EndsWith("@mail.ru", StringComparison.OrdinalIgnoreCase);
    }

    private bool IsValidPassword(string password)
    {
        bool hasUpperCase = password.Any(char.IsUpper);
        bool hasDigit = password.Any(char.IsDigit);
        bool hasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));
        bool isEnglishOnly = password.Where(char.IsLetter).All(c => (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));

        return hasUpperCase && hasDigit && hasSpecialChar && isEnglishOnly;
    }
}